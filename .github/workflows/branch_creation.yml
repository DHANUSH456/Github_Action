name: LVM_XSTORE_BRANCH_CREATION

on:
  workflow_dispatch:
    inputs:
      base_branch_version:
        description: 'Base branch version, e.g. X22.1 or tag name release_X22.1_22.1.0-12.0'
        default: 'X25.1'
      new_branch_version:
        description: 'New Xstore branch version, e.g. X22.2 or X22.2-17'
        default: 'X25.2'
      new_cust_version:
        description: 'New customer version, e.g. for X22.2 or X22.2-17 give as 22.2.0'
        default: '25.2.0'
      is_minor_branch:
        description: 'Some choice parameter'
        default: 'false'
      last_tag:
        description: 'Last tag after which new branch will be cut, e.g. release_X22.1_22.1.0-12.0'
        default: ''

jobs:
  branch_creation:
    runs-on: windows-latest
    env:
      REPOSITORY_XSTORE: "https://github.com/DHANUSH456/onr-xstore.git"
      REPOSITORY_ARTIFACTS: "https://github.com/DHANUSH456/onr-artifatcs3.git"
      REPOSITORY_MNT: 
      REPOSITORY_MNT_PRD:
      REPOSITORY_CMDB_PT2:
      REPOSITORY_CMDB_UAT:
      
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Clean workspace
      run: Remove-Item -Recurse -Force *.* -ErrorAction Ignore

    - name: User Input Parameters
      run: |
        echo "base_branch_version=${{ github.event.inputs.base_branch_version }}" >> $GITHUB_ENV
        echo "new_branch_version=${{ github.event.inputs.new_branch_version }}" >> $GITHUB_ENV
        echo "new_cust_version=${{ github.event.inputs.new_cust_version }}" >> $GITHUB_ENV
        echo "is_minor_branch=${{ github.event.inputs.is_minor_branch }}" >> $GITHUB_ENV
        echo "last_tag=${{ github.event.inputs.last_tag }}" >> $GITHUB_ENV

    - name: Validate User Input
      run: |
        echo "skipStage=false"
        if ($env:is_minor_branch -eq "true") {
          echo "skipStage=true"
        }
        echo "skipStage=$skipStage" >> $GITHUB_ENV

    - name: Check if Branch Exists
      run: |
        $remoteBranches = git ls-remote --heads $env:REPOSITORY_XSTORE
        $branchExists = $remoteBranches | Select-String -Pattern "refs/heads/$env:new_branch_version"
        if ($branchExists) {
            Write-Host "Branch exists, skipping branch creation"
        } else {
            Write-Host "Branch does not exist, proceeding with creation"
        }

    - name: Create Xstore Branch
      if: ${{ env.skipStage != 'true' }}
      run: |
        git clone "${{ env.REPOSITORY_XSTORE }}" "${{ github.workspace }}"
        cd "${{ env.REPOSITORY_XSTORE }}"
        git checkout -b "${{ env.new_branch_version }}" "${{ env.base_branch_version }}"
        powershell.exe -File "${{ github.workspace }}/modify_for_new_branch.ps1" -workspacePath "${{ github.workspace }}" -branchHead "${{ env.base_branch_version }}" -branchMatcher "${{ env.new_branch_version }}" -newCustomerVersion "${{ env.new_cust_version }}" -isMinorBranch "${{ env.is_minor_branch }}"
        git commit -am "Commit from GitHub Actions"
        git push origin "${{ env.new_branch_version }}"

    - name: Create ARTIFACTS Branch
      run: |
        git clone "${{ env.REPOSITORY_ARTIFACTS }}"
        cd "${{ env.REPOSITORY_ARTIFACTS }}"
        git checkout -b "${{ env.new_branch_version }}_artifacts" "${{ env.base_branch_version }}"
        git push origin "${{ env.new_branch_version }}_artifacts"

    - name: Create MNT Branches
      if: ${{ env.skipStage != 'true' }}
      run: |
        for mnt_env in "BCI" "PT2" "UAT" "PRP" "PRD"; do
          powershell.exe -File "${{ github.workspace }}/setup_new_branch.ps1" -workspacePath "${{ github.workspace }}" -branchMatcher "${{ env.new_branch_version }}" -branchHead "${{ env.base_branch_version }}" -mntBranchEnv $mnt_env
        done

    - name: Modify Head MNT Branch for Downstream Merge
      if: ${{ env.skipStage != 'true' }}
      run: |
        powershell.exe -File "${{ github.workspace }}/modify_head_branch.ps1" -workspacePath "${{ github.workspace }}" -branchMatcher "${{ env.new_branch_version }}" -branchHead "${{ env.base_branch_version }}"

    - name: CMDB - BitBucket Changes
      if: ${{ env.skipStage != 'true' }}
      run: |
        for cmdb_env in "PT2" "UAT"; do
          powershell.exe -File "${{ github.workspace }}/CMDB_New_Xstore_Branch_Setup.ps1" -workspacePath "${{ github.workspace }}" -branchMatcher "${{ env.new_branch_version }}" -branchHead "${{ env.base_branch_version }}" -cmdbEnv $cmdb_env
        done

    - name: CMDB - UI Changes
      if: ${{ env.skipStage != 'true' }}
      run: |
        $prdhost = "oneretail-cmdb.vuitton.net:8443"
        Invoke-WebRequest -Uri "https://$prdhost/API/Cmdb/CmdbVersion?version=${{ env.new_branch_version }}&referenceVersion=${{ env.base_branch_version }}" -Method Put -UseDefaultCredentials