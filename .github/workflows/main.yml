name: LVM_UPGRADE_RELEASE_JAR

on:
  workflow_dispatch:
    inputs:
      IS_PRECONFIGURED:
        description: 'Is this a preconfigured build?'
        required: false
        default: 'true'
      BUILD_RELEASE:
        description: 'Release version if preconfigured'
        required: false
        default: '24.5.0'
      PACKAGE_NAME:
        description: 'Package name if preconfigured'
        required: false
        default: 'xstore-components-update-Ug31.0_Ug31.0_Ins31.0_x752_20241028-095120.jar'

jobs:
  upgrade-jar-release:
    runs-on: windows-latest
    env:
      DFS_UPGRADES_DIRECTORY: "${{ github.workspace }}"
      NOTIFICATION_EMAIL_LIST: ""
      DFS_ONERETAIL: ""
      version: ""
      build: ""

    steps:
      - name: Clean workspace
        run: Remove-Item -Recurse -Force *.* -ErrorAction Ignore
        shell: powershell

      - name: Choose Package
        id: choose-package
        run: |
          $isPreconfigured = '${{ github.event.inputs.IS_PRECONFIGURED }}' -eq 'true'
          $version = ''
          $build = ''

          if ($isPreconfigured) {
              $version = '${{ github.event.inputs.BUILD_RELEASE }}'
              $build = '${{ github.event.inputs.PACKAGE_NAME }}'
          } else {
              $relList = Get-ChildItem -Path ${{ env.DFS_UPGRADES_DIRECTORY }} | Sort-Object LastWriteTime -Descending | Select-Object -ExpandProperty Name
              if ($relList.Count -gt 0) {
                  $version = $relList[0]
              } else {
                  Write-Error "No releases found."
                  exit 1
              }
          }

          # Debugging: Print values to check what is being set
          Write-Host "Setting version: $version"
          Write-Host "Setting build: $build"

          # Construct the path correctly
          Remove-Item -Path "${{ env.DFS_UPGRADES_DIRECTORY }}\$version" -Recurse -Force -ErrorAction Ignore
          New-Item -Path "${{ env.DFS_UPGRADES_DIRECTORY }}\$version\xstore-components-update-Ug31.0_Ug31.0_Ins31.0_x752_20241028-095120.jar" -ItemType Directory -Force
          $packagePath = "${{ env.DFS_UPGRADES_DIRECTORY }}\$version"
          Write-Host "Checking package path: $packagePath"

          if (-not (Test-Path $packagePath)) {
              Write-Error "Package path does not exist: $packagePath"
              exit 1
          }

          $pckgList = Get-ChildItem -Path $packagePath -Filter *.jar | Sort-Object LastWriteTime -Descending | Select-Object -ExpandProperty Name
          if (-not $pckgList) {
              Write-Error "No package found in the specified directory."
              exit 1
          }

          Write-Host "Version: $version"
          Write-Host "Build: $build"

          # Ensure that build is a valid .jar file
          if (-not $build.EndsWith(".jar")) {
              Write-Error "Error ... Incorrect selection."
              exit 1
          }

          # Set environment variables for future steps
          [System.Environment]::SetEnvironmentVariable('version', $version, [System.EnvironmentVariableTarget]::Process)
          [System.Environment]::SetEnvironmentVariable('build', $build, [System.EnvironmentVariableTarget]::Process)
        shell: powershell

      - name: Print Version and Build (next step)
        run: |
          Write-Host "Version: ${{ env.version }}"
          Write-Host "Version: $env:version"
          Write-Host "Version: $version"
          Write-Host "Build: ${{ env.build }}"
          Write-Host "Build: $env:build"
          Write-Host "Build: $build"
        shell: powershell


      - name: Copy Jar to Final Location
        run: |
          $upgraderJarFullPath = "${{ env.DFS_UPGRADES_DIRECTORY }}\\$env:version\\"
          $sourceTargetFile = "$upgraderJarFullPath$env:build"
          $finalJarPath = "$upgraderJarFullPath\PRD_JAR"
          $finalTargetFile = "$finalJarPath\\$env:build"

          if (-not (Test-Path $finalJarPath)) {
              New-Item -ItemType Directory -Path $finalJarPath
          }

          Write-Host "Copying $sourceTargetFile to $finalTargetFile"
          Copy-Item -Path $sourceTargetFile -Destination $finalTargetFile
        shell: powershell

      - name: Generate Factory
        id: generate-factory
        run: |
          $versionArr = '$env:version'.Split('.')
          Write-Host "$versionArr[0]"
          Write-Host "$versionArr[1]"
          $streamInput = 'X' + $versionArr[0] + "." + $versionArr[1]
          Write-Host "$streamInput"
          $preStr = "xstore-components-update-"
          $xenvSubversion = ($env:build.Substring($preStr.Length)).Split("_")[0].Replace(".", "_")
          Write-Host "$xenvSubversion"
          $xstoreSubversion = ($env:build.Substring($preStr.Length)).Split("_")[1].Replace(".", "_")
          Write-Host "$xstoreSubversion"
          $xservicesSubversion = ($env:build.Substring($preStr.Length)).Split("_")[2].Replace(".", "_")
          Write-Host "$xstoreSubversion"
          $releaseVersion = "$xenvSubversion.$xstoreSubversion.$xservicesSubversion".ReplaceAll("[^\\d_.]", "")
          Write-Host "$xstoreSubversion"

          if (-not $xstoreSubversion.EndsWith('0')) {
              $xstoreSubversionArr = $xstoreSubversion.Split('_')
              $streamInput += "-" + $xstoreSubversionArr[0].ReplaceAll("[^\\d_.]", "")
          }

          $parentFolderRelease = "$streamInput_$releaseVersion"

          # Trigger the build job
          #$buildJob = @{
              #job = ''
              #inputs = @{
                  #Environment = 'PRD_V18'
                  #Version = $parentFolderRelease
              #}
          #}
        shell: powershell

      - name: Send Upgrade Jar Release Notification
        run: |
          $style = "<style>#info td {border: 1px solid #ddd;padding: 3px;}</style>"
          $msg = "Please find the details for the upgrade jar and metainstaller to be used for PRD upgrade:"
          $msg += "<table id='info'>"
          $msg += "<tr><td><b>Upgrade jar DFS path</b></td><td>$finalJarPath</td></tr>"
          $msg += "<tr><td><b>Upgrade jar name</b></td><td>${{ env.build }}</td></tr>"
          $msg += "<tr><td><b>Metainstaller DFS path</b></td><td>$env:DFS_ONERETAIL\PRD_V18</td></tr>"
          $msg += "<tr><td><b>Metainstaller folder</b></td><td>$parentFolderRelease</td></tr>"
          $msg += "</table>"
        shell: powershell